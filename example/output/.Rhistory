}
alpha_effect(1, -0.1)
alpha_effect(1, -0.2)
alpha_effect(1, -0.5)
alpha_effect(1, -0.8)
alpha_effect(1, -0.9)
plot(x=NULL, xlim=c(0,1), ylim=c(0,1))
for(alpha in seq(-1, 1, by=0.01))
{
lines(alpha_effect(1, alpha))
}
plot(X=NULL, xlim=c(0,1), ylim=c(0,1))
plot(x=NULL, xlim=c(0,1), ylim=c(0,1))
alpha_effect <- function( sigma, alpha )
{
depth  = seq(0, 1, by=0.01)
alphaf = c()
for (dp in depth)
{
if (alpha > 0)
{
alphaf = c(alphaf, sigma*(1-alpha)^dp)
}
if (alpha < 0)
{
alphaf = c(alphaf, sigma*(1-abs(alpha))^(1-dp))
}
if (alpha == 0)
{
alphaf = c(alphaf, sigma)
}
}
lines(depth, alphaf)
}
plot(x=NULL, xlim=c(0,1), ylim=c(0,1))
for(alpha in seq(-1, 1, by=0.01))
{
alpha_effect(1, alpha)
}
alpha_effect_2 <- function( sigma, alpha )
{
depth  = seq(0, 1, by=0.01)
upterm = depth*(1-alpha)
downterm = alpha*(1-depth)
t1 = (upterm/downterm)^(-1)
t2 = (1+t1)^(-1)
alphaf = t1
lines(depth, alphaf)
}
plot(x=NULL, xlim=c(0,1), ylim=c(0,1))
for(alpha in seq(-1, 1, by=0.1))
{
alpha_effect_2(1, alpha)
}
plot(x=NULL, xlim=c(0,1), ylim=c(0,1))
for(alpha in seq(0, 1, by=0.1))
{
alpha_effect_2(1, alpha)
}
alpha_effect_2(1, 1)
alpha_effect_2 <- function( sigma, alpha )
{
depth  = seq(0, 1, by=0.01)
upterm = depth*(1-alpha)
downterm = alpha*(1-depth)
t1 = (upterm/downterm)^(-1)
t2 = (1+t1)^(-1)
alphaf = t1
plot(depth, alphaf)
}
alpha_effect_2(1, 1)
alpha_effect_2 <- function( sigma, alpha )
{
x  = seq(0, 1, by=0.01)
upterm = x*(1-alpha)
downterm = alpha*(1-x)
t1 = (upterm/downterm)^(-1)
t2 = (1+t1)^(-1)
alphaf = t1
plot(depth, alphaf)
}
# plot(x=NULL, xlim=c(0,1), ylim=c(0,1))
# for(alpha in seq(0, 1, by=0.1))
# {
#   alpha_effect_2(1, alpha)
# }
alpha_effect_2(1, 1)
alpha_effect_2 <- function( sigma, alpha )
{
x  = seq(0, 1, by=0.01)
upterm = x*(1-alpha)
downterm = alpha*(1-x)
t1 = (upterm/downterm)^(-1)
t2 = (1+t1)^(-1)
alphaf = t1
plot(x, alphaf)
}
# plot(x=NULL, xlim=c(0,1), ylim=c(0,1))
# for(alpha in seq(0, 1, by=0.1))
# {
#   alpha_effect_2(1, alpha)
# }
alpha_effect_2(1, 1)
alpha_effect_2 <- function( sigma, alpha )
{
x  = seq(0, 1, by=0.01)
upterm = x*(1-alpha)
downterm = alpha*(1-x)
t1 = (upterm/downterm)^(-1)
t2 = (1+t1)^(-1)
alphaf = t1
print(alphaf)
plot(x, alphaf)
}
# plot(x=NULL, xlim=c(0,1), ylim=c(0,1))
# for(alpha in seq(0, 1, by=0.1))
# {
#   alpha_effect_2(1, alpha)
# }
alpha_effect_2(1, 1)
alpha_effect_2 <- function( sigma, alpha )
{
x  = seq(0, 1, by=0.01)
upterm = x*(1-alpha)
downterm = alpha*(1-x)
t1 = (upterm/downterm)^(-1)
t2 = (1+t1)^(-1)
alphaf = t1
print(alphaf)
plot(x, alphaf)
}
# plot(x=NULL, xlim=c(0,1), ylim=c(0,1))
# for(alpha in seq(0, 1, by=0.1))
# {
#   alpha_effect_2(1, alpha)
# }
alpha_effect_2(1, 0.5)
alpha_effect <- function( sigma, alpha )
{
depth  = seq(0, 1, by=0.01)
alphaf = c()
for (dp in depth)
{
if (alpha > 0)
{
alphaf = c(alphaf, sigma*(1-alpha)^dp)
}
if (alpha < 0)
{
alphaf = c(alphaf, sigma*(1-abs(alpha))^(1-dp))
}
if (alpha == 0)
{
alphaf = c(alphaf, sigma)
}
}
lines(depth, alphaf)
}
plot(x=NULL, xlim=c(0,1), ylim=c(0,1))
for(alpha in seq(-1, 1, by=0.1))
{
alpha_effect_2(1, alpha)
}
plot(x=NULL, xlim=c(0,1), ylim=c(0,1))
for(alpha in seq(-1, 1, by=0.1))
{
alpha_effect(1, alpha)
}
alpha_effect <- function( sigma, alpha )
{
depth  = seq(0, 1, by=0.01)
alphaf = c()
for (dp in depth)
{
if (alpha > 0)
{
alphaf = c(alphaf, sigma*(1-alpha)^dp)
}
if (alpha < 0)
{
alphaf = c(alphaf, sigma*(1-abs(alpha))^(1-dp))
}
if (alpha == 0)
{
alphaf = c(alphaf, sigma)
}
}
lines(depth, alphaf, log="y")
}
plot(x=NULL, xlim=c(0,1), ylim=c(0,1))
for(alpha in seq(-1, 1, by=0.1))
{
alpha_effect(1, alpha)
}
plot(x=NULL, xlim=c(0,1), ylim=c(0,1))
for(alpha in seq(-1, 1, by=0.1))
{
alpha_effect(1, alpha)
}
plot(x=NULL, xlim=c(0,1), ylim=c(0,1))
for(alpha in seq(-0.99, 0.99, by=0.1))
{
alpha_effect(1, alpha)
}
alpha_effect <- function( sigma, alpha )
{
depth  = seq(0, 1, by=0.01)
alphaf = c()
for (dp in depth)
{
if (alpha > 0)
{
alphaf = c(alphaf, sigma*(1-alpha)^dp)
}
if (alpha < 0)
{
alphaf = c(alphaf, sigma*(1-abs(alpha))^(1-dp))
}
if (alpha == 0)
{
alphaf = c(alphaf, sigma)
}
}
lines(depth, log10(alphaf))
}
plot(x=NULL, xlim=c(0,1), ylim=c(0,1))
for(alpha in seq(-0.99, 0.99, by=0.1))
{
alpha_effect(1, alpha)
}
plot(x=NULL, xlim=c(0,1), ylim=c(-10000,1))
for(alpha in seq(-0.99, 0.99, by=0.1))
{
alpha_effect(1, alpha)
}
plot(x=NULL, xlim=c(0,1), ylim=c(-100,0))
for(alpha in seq(-0.99, 0.99, by=0.1))
{
alpha_effect(1, alpha)
}
plot(x=NULL, xlim=c(0,1), ylim=c(-10,0))
for(alpha in seq(-0.99, 0.99, by=0.1))
{
alpha_effect(1, alpha)
}
plot(x=NULL, xlim=c(0,1), ylim=c(-2,0))
for(alpha in seq(-0.99, 0.99, by=0.1))
{
alpha_effect(1, alpha)
}
plot(x=NULL, xlim=c(0,1), ylim=c(-2,0))
for(alpha in seq(-0.99, 0.99, by=0.01))
{
alpha_effect(1, alpha)
}
plot(x=NULL, xlim=c(0,1), ylim=c(-2,0))
for(alpha in seq(-1, 1, by=0.01))
{
alpha_effect(1, alpha)
}
alpha_effect <- function( sigma, alpha )
{
depth  = seq(0, 1, by=0.01)
alphaf = c()
for (dp in depth)
{
if (alpha > 0)
{
alphaf = c(alphaf, sigma*(1-alpha)^dp)
}
if (alpha < 0)
{
alphaf = c(alphaf, sigma*(1-abs(alpha))^(1-dp))
}
if (alpha == 0)
{
alphaf = c(alphaf, sigma)
}
}
lines(depth, (alphaf))
}
plot(x=NULL, xlim=c(0,1), ylim=c(-2,0))
for(alpha in seq(-1, 1, by=0.01))
{
alpha_effect(1, alpha)
}
plot(x=NULL, xlim=c(0,1), ylim=c(0,1))
for(alpha in seq(-1, 1, by=0.01))
{
alpha_effect(1, alpha)
}
#!/usr/bin/env Rscript
#***************************************************************************
# Copyright © 2021-2022 Charles Rocabert, Frédéric Guillaume
# Web: https://github.com/charlesrocabert/Tribolium-Polygenic-Adaptation
#
# 2_split_bam_map.R
# -------------------
# Split the bam map into two files containing each complete version.
#***************************************************************************
WD_PATH = "/Users/charlesrocabert/git/Tribolium-Polygenic-Adaptation"
d = read.table(paste0(WD_PATH,"/data/tribolium_bam/bam_map_ALL.csv"), h=T, sep=";")
d = d[!is.na(d$fitness) & !is.na(d$sequencing_run),]
head(d)
head(d[,seq(1,10)])
head(d[,seq(1,11)])
head(d[,seq(1,10)])
#!/usr/bin/env Rscript
#***************************************************************************
# Copyright © 2021-2022 Charles Rocabert, Frédéric Guillaume
# Web: https://github.com/charlesrocabert/Tribolium-Polygenic-Adaptation
#
# 2_split_bam_map.R
# -------------------
# Split the bam map into two files containing each complete version.
#***************************************************************************
WD_PATH = "/Users/charlesrocabert/git/Tribolium-Polygenic-Adaptation"
d = read.table(paste0(WD_PATH,"/data/tribolium_bam/bam_map_ALL.csv"), h=T, sep=";")
d = d[!is.na(d$fitness) & !is.na(d$sequencing_run),]
###############################
# Tcas3.30 Version-2017-03-28 #
###############################
d1 = d[d$annotation=="Version-2016-02-11",]
d1 = d1[!duplicated(d1$sample),]
write.table(d1, file=paste0(WD_PATH,"/data/tribolium_bam/bam_map_Tcas3.30_ALL.csv"), quote=F, row.names=F, col.names=T, sep=";")
write.table(d1[d1$source_env=="CT" | d1$source_env=="HD",seq(1,10)], file=paste0(WD_PATH,"/data/tribolium_bam/bam_map_Tcas3.30.csv"), quote=F, row.names=F, col.names=T, sep=";")
##############################
# Tcas5.2 Version-2017-03-28 #
##############################
d2 = d[d$annotation=="Version-2017-03-28",]
d2 = d2[!duplicated(d2$sample),]
write.table(d2, file=paste0(WD_PATH,"/data/tribolium_bam/bam_map_Tcas5.2_ALL.csv"), quote=F, row.names=F, col.names=T, sep=";")
print("toto\ntoto")
print("totototo")
88878*4*2+2*88878
install.packages(c("ade4", "adegenet", "BiocManager", "blob", "broom", "car", "caret", "checkmate", "cli", "CMplot", "deSolve", "dplyr", "eegkitdata", "ellipse", "ff", "future", "future.apply", "gap", "gdata", "geiger", "ggplot2", "globals", "gmodels", "gtools", "haven", "hierfstat", "httr", "igraph", "knitr", "lme4", "maptools", "MASS", "matrixStats", "network", "nloptr", "openssl", "parallelly", "phytools", "polynom", "ps", "quantmod", "quantreg", "RcppArmadillo", "RcppEigen", "reshape", "rgl", "rmarkdown", "roxygen2", "RSpectra", "RSQLite", "scales", "segmented", "seqinr", "sna", "sp", "statnet.common", "subplex", "testthat", "tibble", "tinytex", "tseries", "usethis", "uuid", "vctrs", "vegan", "VennDiagram", "webshot", "xfun", "zoo"))
11811/50
11887/50
78/5
#!/usr/bin/env Rscript
#***************************************************************************
# puutools
# ---------
# Live tracking of lineage/phylogenetic trees and evolutionary events in
# individual-based forward-in-time simulations of evolution.
#
# Copyright © 2022 Charles Rocabert
# Web: https://github.com/charlesrocabert/puutools/
#
# puutools is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# puutools is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#***************************************************************************
rm(list=ls())
library("ape")
#setwd(Path to example folder)
setwd("/Users/charlesrocabert/git/puutools/example/output/")
best = read.table("lineage_best.txt", sep=" ", h=T)
all  = read.table("lineage_all.txt", sep=" ", h=T)
tree = read.tree("phylogenetic_tree.phb")
par(mfrow=c(2,2))
plot(best$generation, best$mutation_size, xlab="Generation", ylab="Mutation size", main="\n\nFixed mutation sizes", col="cornflowerblue", type="l", lwd=2)
plot(best$generation, best$trait, xlab="Generation", ylab="Phenotypic trait", main="\n\nPhenotypic trait evolution", col="cornflowerblue", type="l", lwd=2)
plot(best$generation, best$fitness, xlab="Generation", ylab="Fitness", main="\n\nFitness", col="cornflowerblue", type="l", lwd=2)
plot(tree, root.edge=T, show.node.label=F, show.tip.label=F, use.edge.length=F, main="\n\nPhylogenetic tree (root excluded)")
mtext("Tracing back the lineage of the last best individual", side = 3, line = -1.5, outer = TRUE)
axisPhylo()
plot(all$generation, all$trait)
plot(all$generation, all$trait, xlim=c(6000, 10000))
plot(all$generation, all$trait, xlim=c(9000, 10000))
plot(all$generation, all$trait, xlim=c(9000, 10000), ylim=c(0,0.2))
plot(all$generation, all$trait, xlim=c(9000, 10000), ylim=c(0,0.2), type="l")
plot(all$generation, all$trait, xlim=c(9000, 10000), ylim=c(0,0.2), pch=20)
plot(all$generation, all$trait, xlim=c(9000, 10000), ylim=c(0,0.1), pch=20)
heatmap(all$generation, all$trait, xlim=c(9000, 10000), ylim=c(0,0.1), pch=20)
plot(all$generation, all$trait, xlim=c(9000, 10000), ylim=c(0,0.1), pch=20, type="l")
plot(all$generation, all$trait, xlim=c(9000, 10000), ylim=c(0,0.1), pch=20)
#!/usr/bin/env Rscript
#***************************************************************************
# puutools
# ---------
# Live tracking of lineage/phylogenetic trees and evolutionary events in
# individual-based forward-in-time simulations of evolution.
#
# Copyright © 2022 Charles Rocabert
# Web: https://github.com/charlesrocabert/puutools/
#
# puutools is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# puutools is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#***************************************************************************
rm(list=ls())
library("ape")
#setwd(Path to example folder)
setwd("/Users/charlesrocabert/git/puutools/example/output/")
best = read.table("lineage_best.txt", sep=" ", h=T)
all  = read.table("lineage_all.txt", sep=" ", h=T)
tree = read.tree("phylogenetic_tree.phb")
par(mfrow=c(2,2))
plot(best$generation, best$mutation_size, xlab="Generation", ylab="Mutation size", main="\n\nFixed mutation sizes", col="cornflowerblue", type="l", lwd=2)
plot(best$generation, best$trait, xlab="Generation", ylab="Phenotypic trait", main="\n\nPhenotypic trait evolution", col="cornflowerblue", type="l", lwd=2)
plot(best$generation, best$fitness, xlab="Generation", ylab="Fitness", main="\n\nFitness", col="cornflowerblue", type="l", lwd=2)
plot(tree, root.edge=T, show.node.label=F, show.tip.label=F, use.edge.length=F, main="\n\nPhylogenetic tree (root excluded)")
mtext("Tracing back the lineage of the last best individual", side = 3, line = -1.5, outer = TRUE)
axisPhylo()
plot(all$generation, all$trait, xlim=c(9000, 10000), ylim=c(0,0.1), pch=20)
library("tidyverse")
ggplot(all, aes(generation, trait)) + geom_density_2d()
qplot(all, aes(generation, trait))
qplot(generation, trait, data=all)
qplot(generation, trait, data=all, geom="bin2d")
?qplot
ggplot(all, aes(generation, trait)) + stat_bin2d()
ggplot(all, aes(generation, trait)) + stat_bin2d(bins=200)
?
?stat_bin2d
ggplot(all, aes(generation, trait)) + geom_bin2d(bins=200)
ggplot(all, aes(generation, trait)) + geom_bin2d(bins=200)
ggplot(all, aes(generation, trait), bg="black") + geom_bin2d(bins=200)
ggplot(all, aes(generation, trait), bg="black") + geom_bin2d(bins=200) + theme_dark()
ggplot(all, aes(generation, trait), bg="black") + geom_bin2d(bins=200) + theme(plot.background = element_rect(fill = "black"))
ggplot(all, aes(generation, trait), bg="black") + geom_bin2d(bins=200) + + scale_colour_wsj("colors6")
ggplot(all, aes(generation, trait), bg="black") + geom_density_2d(bins=200)
ggplot(all, aes(generation, trait), bg="black") + geom_density_2d(geom="raster")
ggplot(all, aes(generation, trait), bg="black") + stat_density_2d(geom="raster")
ggplot(all, aes(generation, trait)) + stat_density_2d(aes(fill = ..density..), geom = "raster", contour = FALSE)
ggplot(all, aes(generation, trait)) + stat_density_2d(aes(fill = ..density..), geom = "raster", contour = FALSE, bins=200)
?
?stat_density_2d
ggplot(all, aes(generation, trait)) + stat_density_2d(aes(fill = ..density..), geom = "raster", contour = FALSE, n=200)
ggplot(all, aes(generation, trait)) + stat_density_2d(aes(fill = ..density..), geom = "raster", contour = FALSE, n=500)
ggplot(all, aes(generation, trait)) + stat_density_2d(aes(fill = ..density..), geom = "raster", contour = FALSE, n=200) + scale_fill_distiller(palette=4, direction=-1)
ggplot(all, aes(generation, trait)) + stat_density_2d(aes(fill = ..density..), geom = "raster", contour = FALSE, n=200) + scale_fill_distiller(palette=4, direction=-1) + xlim(8000, 10000)
ggplot(all, aes(generation, trait)) + stat_density_2d(aes(fill = ..density..), geom = "raster", contour = FALSE, n=200) + scale_fill_distiller(palette=4, direction=-1) + xlim(8000, 10000) + ylim=c(0,0.1)
ggplot(all, aes(generation, trait)) + stat_density_2d(aes(fill = ..density..), geom = "raster", contour = FALSE, n=200) + scale_fill_distiller(palette=4, direction=-1) + xlim(8000, 10000) + ylim(0,0.1)
ggplot(all, aes(generation, trait)) + stat_density_2d(aes(fill = ..density..), geom = "raster", contour = FALSE, n=300) + scale_fill_distiller(palette=4, direction=-1) + xlim(8000, 10000) + ylim(0,0.1)
ggplot(all, aes(generation, trait)) + stat_density_2d(aes(fill = ..density..), geom = "raster", contour = FALSE, n=500) + scale_fill_distiller(palette=4, direction=-1) + xlim(8000, 10000) + ylim(0,0.1)
ggplot(all, aes(generation, trait)) + stat_density_2d(aes(fill = ..density..), geom = "raster", contour = FALSE, n=500) + scale_fill_distiller(palette=4, direction=-1) + xlim(6000, 10000) + ylim(0,0.1)
ggplot(all, aes(generation, trait)) + stat_density_2d(geom = "raster", contour = FALSE, n=500) + scale_fill_distiller(palette=4, direction=-1) + xlim(6000, 10000) + ylim(0,0.1)
ggplot(all, aes(generation, trait)) + stat_density_2d(aes(fill = ..density..), geom = "raster", contour = FALSE, n=500) + scale_fill_distiller(palette=4, direction=-1) + xlim(6000, 10000) + ylim(0,0.1)
ggplot(all, aes(generation, trait)) + stat_density_2d(aes(fill = ..density..), geom = "raster", contour = FALSE, n=500) + scale_fill_distiller(palette=4, direction=-1)
ggplot(all, aes(generation, trait)) + stat_density_2d(aes(fill = ..density..), geom = "raster", contour = FALSE, n=500) + scale_fill_distiller(palette=4, direction=-1) + theme_classic()
ggplot(all, aes(generation, trait)) + stat_density_2d(aes(fill = ..density..), geom = "raster", contour = T, n=200) + scale_fill_distiller(palette=4, direction=-1) + theme_classic()
ggplot(all, aes(generation, trait)) + stat_density_2d(aes(fill = ..density..), geom = "raster", contour=F, n=200) + scale_fill_distiller(palette=4, direction=-1) + theme_classic()
ggplot(all, aes(generation, trait)) + geom_density_2d_filled()
ggplot(all, aes(generation, trait)) + geom_density_2d_filled(n=200)
ggplot(all, aes(generation, trait)) + geom_density_2d_filled(n=300)
?geom_density_2d_filled
ggplot(all, aes(generation, trait)) + geom_density_2d_filled(n=500)
ggplot(all, aes(generation, trait)) + stat_density_2d(aes(fill = ..density..), geom = "raster", contour=F, n=200) + scale_fill_distiller(palette=4, direction=-1) + theme_classic()
ggplot(all, aes(generation, trait)) + stat_density_2d(aes(fill = ..density..), geom = "raster", contour=F, n=200) + scale_fill_distiller(palette=4, direction=-1) + theme_classic() + ggtitle("Phenotypic trait trace along the lineage tree") + xlab("Generation") + ylab("Phenotypic trait")
ggplot(all, aes(generation, fitness)) + stat_density_2d(aes(fill = ..density..), geom = "raster", contour=F, n=200) + scale_fill_distiller(palette=4, direction=-1) + theme_classic() + ggtitle("Phenotypic trait trace along the lineage tree") + xlab("Generation") + ylab("Phenotypic trait")
ggplot(all, aes(generation, mutation_size)) + stat_density_2d(aes(fill = ..density..), geom = "raster", contour=F, n=200) + scale_fill_distiller(palette=4, direction=-1) + theme_classic() + ggtitle("Phenotypic trait trace along the lineage tree") + xlab("Generation") + ylab("Phenotypic trait")
ggplot(all, aes(generation, log10(fitness))) + stat_density_2d(aes(fill = ..density..), geom = "raster", contour=F, n=200) + scale_fill_distiller(palette=4, direction=-1) + theme_classic() + ggtitle("Phenotypic trait trace along the lineage tree") + xlab("Generation") + ylab("Phenotypic trait")
ggplot(all, aes(generation, trait)) + stat_density_2d(aes(fill = ..density..), geom = "raster", contour=F, n=200) + scale_fill_distiller(palette=4, direction=-1) + theme_classic() + ggtitle("Phenotypic trait trace along the lineage tree") + xlab("Generation") + ylab("Phenotypic trait")
ggplot(all, aes(generation, trait)) + stat_density_2d(aes(fill = ..density..), geom = "raster", contour=F, n=200) + scale_fill_distiller(palette=4, direction=-1) + theme_minimal() + ggtitle("Phenotypic trait trace along the lineage tree") + xlab("Generation") + ylab("Phenotypic trait")
png("lineage_best.png")
par(mfrow=c(2,2))
plot(best$generation, best$mutation_size, xlab="Generation", ylab="Mutation size", main="\n\nFixed mutation sizes", col="cornflowerblue", type="l", lwd=2)
plot(best$generation, best$trait, xlab="Generation", ylab="Phenotypic trait", main="\n\nPhenotypic trait evolution", col="cornflowerblue", type="l", lwd=2)
plot(best$generation, best$fitness, xlab="Generation", ylab="Fitness", main="\n\nFitness", col="cornflowerblue", type="l", lwd=2)
plot(tree, root.edge=T, show.node.label=F, show.tip.label=F, use.edge.length=F, main="\n\nPhylogenetic tree (root excluded)")
mtext("Tracing back the lineage of the last best individual", side = 3, line = -1.5, outer = TRUE)
axisPhylo()
dev.off()
png("lineage_best.png", width=1200, height=800)
png("lineage_best.png", width=1200, height=800, units="px")
png("lineage_best.png", width=1200, height=800, units="px")
#png
par(mfrow=c(2,2))
plot(best$generation, best$mutation_size, xlab="Generation", ylab="Mutation size", main="\n\nFixed mutation sizes", col="cornflowerblue", type="l", lwd=2)
plot(best$generation, best$trait, xlab="Generation", ylab="Phenotypic trait", main="\n\nPhenotypic trait evolution", col="cornflowerblue", type="l", lwd=2)
plot(best$generation, best$fitness, xlab="Generation", ylab="Fitness", main="\n\nFitness", col="cornflowerblue", type="l", lwd=2)
plot(tree, root.edge=T, show.node.label=F, show.tip.label=F, use.edge.length=F, main="\n\nPhylogenetic tree (root excluded)")
mtext("Tracing back the lineage of the last best individual", side = 3, line = -1.5, outer = TRUE)
axisPhylo()
dev.off()
png("lineage_best.png", width=1200, height=1000, units="px")
#png
par(mfrow=c(2,2))
png("lineage_best.png", width=1200, height=1000, units="px")
#png
par(mfrow=c(2,2))
plot(best$generation, best$mutation_size, xlab="Generation", ylab="Mutation size", main="\n\nFixed mutation sizes", col="cornflowerblue", type="l", lwd=2)
plot(best$generation, best$trait, xlab="Generation", ylab="Phenotypic trait", main="\n\nPhenotypic trait evolution", col="cornflowerblue", type="l", lwd=2)
plot(best$generation, best$fitness, xlab="Generation", ylab="Fitness", main="\n\nFitness", col="cornflowerblue", type="l", lwd=2)
plot(tree, root.edge=T, show.node.label=F, show.tip.label=F, use.edge.length=F, main="\n\nPhylogenetic tree (root excluded)")
mtext("Tracing back the lineage of the last best individual", side = 3, line = -1.5, outer = TRUE)
axisPhylo()
dev.off()
p = ggplot(all, aes(generation, trait)) + stat_density_2d(aes(fill = ..density..), geom = "raster", contour=F, n=200) + scale_fill_distiller(palette=4, direction=-1) + theme_minimal() + ggtitle("Phenotypic trait trace along the lineage tree") + xlab("Generation") + ylab("Phenotypic trait")
ggsave(p)
?ggsave
ggsave("figure2.png", p)
